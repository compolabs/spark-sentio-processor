/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog} from '@sentio/sdk/fuel'
import {Option,Enum,Vec} from './common.js'
import {AssetTypeInput,AssetTypeOutput,LimitTypeInput,LimitTypeOutput,OrderChangeTypeInput,OrderChangeTypeOutput,OrderTypeInput,OrderTypeOutput,AccountErrorInput,AccountErrorOutput,AssetErrorInput,AssetErrorOutput,AuthErrorInput,AuthErrorOutput,MatchErrorInput,MatchErrorOutput,OrderErrorInput,OrderErrorOutput,ValueErrorInput,ValueErrorOutput,IdentityInput,IdentityOutput,ReentrancyErrorInput,ReentrancyErrorOutput,AccountInput,AccountOutput,BalanceInput,BalanceOutput,OrderInput,OrderOutput,OrderChangeInfoInput,OrderChangeInfoOutput,ProtocolFeeInput,ProtocolFeeOutput,CancelOrderEventInput,CancelOrderEventOutput,DepositEventInput,DepositEventOutput,OpenOrderEventInput,OpenOrderEventOutput,SetEpochEventInput,SetEpochEventOutput,SetMatcherRewardEventInput,SetMatcherRewardEventOutput,SetProtocolFeeEventInput,SetProtocolFeeEventOutput,TradeOrderEventInput,TradeOrderEventOutput,WithdrawEventInput,WithdrawEventOutput,AddressInput,AddressOutput,AssetIdInput,AssetIdOutput,ContractIdInput,ContractIdOutput, SparkMarket} from './SparkMarket.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes } from 'fuels';


namespace SparkMarketNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeReentrancyError(): Array<ReentrancyErrorOutput> {
      return this.logs?.filter(l =>["5557842539076482339"].includes(l.logId) ).map(l => l.data) as Array<ReentrancyErrorOutput>
    }

    getLogsOfTypeOrderError(): Array<OrderErrorOutput> {
      return this.logs?.filter(l =>["999626799421532101"].includes(l.logId) ).map(l => l.data) as Array<OrderErrorOutput>
    }

    getLogsOfTypeAuthError(): Array<AuthErrorOutput> {
      return this.logs?.filter(l =>["487470194140633944"].includes(l.logId) ).map(l => l.data) as Array<AuthErrorOutput>
    }

    getLogsOfTypeAccountError(): Array<AccountErrorOutput> {
      return this.logs?.filter(l =>["15329379498675066312"].includes(l.logId) ).map(l => l.data) as Array<AccountErrorOutput>
    }

    getLogsOfTypeCancelOrderEvent(): Array<CancelOrderEventOutput> {
      return this.logs?.filter(l =>["14676650066558707344"].includes(l.logId) ).map(l => l.data) as Array<CancelOrderEventOutput>
    }

    getLogsOfTypeValueError(): Array<ValueErrorOutput> {
      return this.logs?.filter(l =>["4038555509566971562"].includes(l.logId) ).map(l => l.data) as Array<ValueErrorOutput>
    }

    getLogsOfTypeAssetError(): Array<AssetErrorOutput> {
      return this.logs?.filter(l =>["16169998749359270814"].includes(l.logId) ).map(l => l.data) as Array<AssetErrorOutput>
    }

    getLogsOfTypeDepositEvent(): Array<DepositEventOutput> {
      return this.logs?.filter(l =>["12590297951544646752"].includes(l.logId) ).map(l => l.data) as Array<DepositEventOutput>
    }

    getLogsOfTypeOpenOrderEvent(): Array<OpenOrderEventOutput> {
      return this.logs?.filter(l =>["7812135309850120461"].includes(l.logId) ).map(l => l.data) as Array<OpenOrderEventOutput>
    }

    getLogsOfTypeSetEpochEvent(): Array<SetEpochEventOutput> {
      return this.logs?.filter(l =>["5744192922338635869"].includes(l.logId) ).map(l => l.data) as Array<SetEpochEventOutput>
    }

    getLogsOfTypeTradeOrderEvent(): Array<TradeOrderEventOutput> {
      return this.logs?.filter(l =>["18305104039093136274"].includes(l.logId) ).map(l => l.data) as Array<TradeOrderEventOutput>
    }

    getLogsOfTypeMatchError(): Array<MatchErrorOutput> {
      return this.logs?.filter(l =>["15838754841496526215"].includes(l.logId) ).map(l => l.data) as Array<MatchErrorOutput>
    }

    getLogsOfTypeSetMatcherRewardEvent(): Array<SetMatcherRewardEventOutput> {
      return this.logs?.filter(l =>["649664855397936830"].includes(l.logId) ).map(l => l.data) as Array<SetMatcherRewardEventOutput>
    }

    getLogsOfTypeSetProtocolFeeEvent(): Array<SetProtocolFeeEventOutput> {
      return this.logs?.filter(l =>["10772010129570911307"].includes(l.logId) ).map(l => l.data) as Array<SetProtocolFeeEventOutput>
    }

    getLogsOfTypeWithdrawEvent(): Array<WithdrawEventOutput> {
      return this.logs?.filter(l =>["10918704871079408520"].includes(l.logId) ).map(l => l.data) as Array<WithdrawEventOutput>
    }
  }


}

export class SparkMarketProcessor extends FuelAbstractProcessor<SparkMarket> {
  static bind(config: Omit<FuelProcessorConfig, 'abi'>) {
    return new SparkMarketProcessor(SparkMarket.abi, {
      name: 'SparkMarket',
      ...config,
    })
  }

   


  onLogReentrancyError(handler: (log: FuelLog<ReentrancyErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<ReentrancyErrorOutput>(logIdFilter ?? ["5557842539076482339"], (log, ctx) => handler(log, ctx))
  }

  onLogOrderError(handler: (log: FuelLog<OrderErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<OrderErrorOutput>(logIdFilter ?? ["999626799421532101"], (log, ctx) => handler(log, ctx))
  }

  onLogAuthError(handler: (log: FuelLog<AuthErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<AuthErrorOutput>(logIdFilter ?? ["487470194140633944"], (log, ctx) => handler(log, ctx))
  }

  onLogAccountError(handler: (log: FuelLog<AccountErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<AccountErrorOutput>(logIdFilter ?? ["15329379498675066312"], (log, ctx) => handler(log, ctx))
  }

  onLogCancelOrderEvent(handler: (log: FuelLog<CancelOrderEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<CancelOrderEventOutput>(logIdFilter ?? ["14676650066558707344"], (log, ctx) => handler(log, ctx))
  }

  onLogValueError(handler: (log: FuelLog<ValueErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<ValueErrorOutput>(logIdFilter ?? ["4038555509566971562"], (log, ctx) => handler(log, ctx))
  }

  onLogAssetError(handler: (log: FuelLog<AssetErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<AssetErrorOutput>(logIdFilter ?? ["16169998749359270814"], (log, ctx) => handler(log, ctx))
  }

  onLogDepositEvent(handler: (log: FuelLog<DepositEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<DepositEventOutput>(logIdFilter ?? ["12590297951544646752"], (log, ctx) => handler(log, ctx))
  }

  onLogOpenOrderEvent(handler: (log: FuelLog<OpenOrderEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<OpenOrderEventOutput>(logIdFilter ?? ["7812135309850120461"], (log, ctx) => handler(log, ctx))
  }

  onLogSetEpochEvent(handler: (log: FuelLog<SetEpochEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<SetEpochEventOutput>(logIdFilter ?? ["5744192922338635869"], (log, ctx) => handler(log, ctx))
  }

  onLogTradeOrderEvent(handler: (log: FuelLog<TradeOrderEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<TradeOrderEventOutput>(logIdFilter ?? ["18305104039093136274"], (log, ctx) => handler(log, ctx))
  }

  onLogMatchError(handler: (log: FuelLog<MatchErrorOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<MatchErrorOutput>(logIdFilter ?? ["15838754841496526215"], (log, ctx) => handler(log, ctx))
  }

  onLogSetMatcherRewardEvent(handler: (log: FuelLog<SetMatcherRewardEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<SetMatcherRewardEventOutput>(logIdFilter ?? ["649664855397936830"], (log, ctx) => handler(log, ctx))
  }

  onLogSetProtocolFeeEvent(handler: (log: FuelLog<SetProtocolFeeEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<SetProtocolFeeEventOutput>(logIdFilter ?? ["10772010129570911307"], (log, ctx) => handler(log, ctx))
  }

  onLogWithdrawEvent(handler: (log: FuelLog<WithdrawEventOutput>, ctx: FuelContractContext<SparkMarket>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<WithdrawEventOutput>(logIdFilter ?? ["10918704871079408520"], (log, ctx) => handler(log, ctx))
  }

}
