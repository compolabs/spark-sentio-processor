/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog, addFuelProcessor, getFuelProcessor, FuelBaseProcessorTemplate } from '@sentio/sdk/fuel'
import {Option,Enum,Vec} from './common.js'
import {MarketRegistryErrorInput,MarketRegistryErrorOutput,AccessErrorInput,AccessErrorOutput,StateInput,StateOutput,IdentityInput,IdentityOutput,InitializationErrorInput,InitializationErrorOutput,MarketRegisterEventInput,MarketRegisterEventOutput,MarketUnregisterEventInput,MarketUnregisterEventOutput,AddressInput,AddressOutput,AssetIdInput,AssetIdOutput,ContractIdInput,ContractIdOutput,OwnershipSetInput,OwnershipSetOutput,OwnershipTransferredInput,OwnershipTransferredOutput, SparkRegistry} from './SparkRegistry.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes, StdString, StrSlice, RawSlice, B256Address, ChecksumAddress, Bech32Address } from 'fuels';


namespace SparkRegistryNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeInitializationError(): Array<InitializationErrorOutput> {
      return this.logs?.filter(l =>["2161305517876418151"].includes(l.logId) ).map(l => l.data) as Array<InitializationErrorOutput>
    }

    getLogsOfTypeOwnershipSet(): Array<OwnershipSetOutput> {
      return this.logs?.filter(l =>["16280289466020123285"].includes(l.logId) ).map(l => l.data) as Array<OwnershipSetOutput>
    }

    getLogsOfTypeAccessError(): Array<AccessErrorOutput> {
      return this.logs?.filter(l =>["4571204900286667806"].includes(l.logId) ).map(l => l.data) as Array<AccessErrorOutput>
    }

    getLogsOfTypeOwnershipTransferred(): Array<OwnershipTransferredOutput> {
      return this.logs?.filter(l =>["12970362301975156672"].includes(l.logId) ).map(l => l.data) as Array<OwnershipTransferredOutput>
    }

    getLogsOfTypeMarketRegistryError(): Array<MarketRegistryErrorOutput> {
      return this.logs?.filter(l =>["12854673644547923665"].includes(l.logId) ).map(l => l.data) as Array<MarketRegistryErrorOutput>
    }

    getLogsOfTypeMarketRegisterEvent(): Array<MarketRegisterEventOutput> {
      return this.logs?.filter(l =>["16526329487357911494"].includes(l.logId) ).map(l => l.data) as Array<MarketRegisterEventOutput>
    }

    getLogsOfTypeMarketUnregisterEvent(): Array<MarketUnregisterEventOutput> {
      return this.logs?.filter(l =>["8687802410378175690"].includes(l.logId) ).map(l => l.data) as Array<MarketUnregisterEventOutput>
    }
  }


}

type LogIdFilter<T> = T | T[]
const LogInitializationErrorId = "2161305517876418151"
const LogOwnershipSetId = "16280289466020123285"
const LogAccessErrorId = "4571204900286667806"
const LogOwnershipTransferredId = "12970362301975156672"
const LogMarketRegistryErrorId = "12854673644547923665"
const LogMarketRegisterEventId = "16526329487357911494"
const LogMarketUnregisterEventId = "8687802410378175690"

export class SparkRegistryProcessor extends FuelAbstractProcessor<SparkRegistry> {
  static bind(options: Omit<FuelProcessorConfig, 'abi'>) {
    if (!options.name) {
      options.name = "SparkRegistry"
    }
    let processor = getFuelProcessor(options) as SparkRegistryProcessor
    if (!processor) {
      processor = new SparkRegistryProcessor(SparkRegistry.abi, {
        name: 'SparkRegistry',
        ...options,
      })
      addFuelProcessor(options, processor)
    }
    return processor
  }

   

  
  onLogInitializationError(handler: (log: FuelLog<InitializationErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<InitializationErrorOutput>([LogInitializationErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipSet(handler: (log: FuelLog<OwnershipSetOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<OwnershipSetOutput>([LogOwnershipSetId], (log, ctx) => handler(log, ctx))
  }

  onLogAccessError(handler: (log: FuelLog<AccessErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<AccessErrorOutput>([LogAccessErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipTransferred(handler: (log: FuelLog<OwnershipTransferredOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<OwnershipTransferredOutput>([LogOwnershipTransferredId], (log, ctx) => handler(log, ctx))
  }

  onLogMarketRegistryError(handler: (log: FuelLog<MarketRegistryErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<MarketRegistryErrorOutput>([LogMarketRegistryErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogMarketRegisterEvent(handler: (log: FuelLog<MarketRegisterEventOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<MarketRegisterEventOutput>([LogMarketRegisterEventId], (log, ctx) => handler(log, ctx))
  }

  onLogMarketUnregisterEvent(handler: (log: FuelLog<MarketUnregisterEventOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<MarketUnregisterEventOutput>([LogMarketUnregisterEventId], (log, ctx) => handler(log, ctx))
  }

}

export class SparkRegistryProcessorTemplate extends FuelBaseProcessorTemplate<SparkRegistry> {
  bindInternal(options: Omit<FuelProcessorConfig, 'abi'>) {
    return SparkRegistryProcessor.bind(options)
  }

  
  onLogInitializationError(handler: (log: FuelLog<InitializationErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<InitializationErrorOutput>([LogInitializationErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipSet(handler: (log: FuelLog<OwnershipSetOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<OwnershipSetOutput>([LogOwnershipSetId], (log, ctx) => handler(log, ctx))
  }

  onLogAccessError(handler: (log: FuelLog<AccessErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<AccessErrorOutput>([LogAccessErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipTransferred(handler: (log: FuelLog<OwnershipTransferredOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<OwnershipTransferredOutput>([LogOwnershipTransferredId], (log, ctx) => handler(log, ctx))
  }

  onLogMarketRegistryError(handler: (log: FuelLog<MarketRegistryErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<MarketRegistryErrorOutput>([LogMarketRegistryErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogMarketRegisterEvent(handler: (log: FuelLog<MarketRegisterEventOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<MarketRegisterEventOutput>([LogMarketRegisterEventId], (log, ctx) => handler(log, ctx))
  }

  onLogMarketUnregisterEvent(handler: (log: FuelLog<MarketUnregisterEventOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>) {
    return super.onLog<MarketUnregisterEventOutput>([LogMarketUnregisterEventId], (log, ctx) => handler(log, ctx))
  }
}

