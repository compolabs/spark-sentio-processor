/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog} from '@sentio/sdk/fuel'
import {Option,Enum,Vec} from './common.js'
import {AuthErrorInput,AuthErrorOutput,MarketRegistryErrorInput,MarketRegistryErrorOutput,MarketRegisterEventInput,MarketRegisterEventOutput,MarketUnregisterEventInput,MarketUnregisterEventOutput,AddressInput,AddressOutput,AssetIdInput,AssetIdOutput,ContractIdInput,ContractIdOutput, SparkRegistry} from './SparkRegistry.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes } from 'fuels';


namespace SparkRegistryNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeAuthError(): Array<AuthErrorOutput> {
      return this.logs?.filter(l =>["487470194140633944"].includes(l.logId) ).map(l => l.data) as Array<AuthErrorOutput>
    }

    getLogsOfTypeMarketRegistryError(): Array<MarketRegistryErrorOutput> {
      return this.logs?.filter(l =>["12854673644547923665"].includes(l.logId) ).map(l => l.data) as Array<MarketRegistryErrorOutput>
    }

    getLogsOfTypeMarketRegisterEvent(): Array<MarketRegisterEventOutput> {
      return this.logs?.filter(l =>["16526329487357911494"].includes(l.logId) ).map(l => l.data) as Array<MarketRegisterEventOutput>
    }

    getLogsOfTypeMarketUnregisterEvent(): Array<MarketUnregisterEventOutput> {
      return this.logs?.filter(l =>["8687802410378175690"].includes(l.logId) ).map(l => l.data) as Array<MarketUnregisterEventOutput>
    }
  }


}

export class SparkRegistryProcessor extends FuelAbstractProcessor<SparkRegistry> {
  static bind(config: Omit<FuelProcessorConfig, 'abi'>) {
    return new SparkRegistryProcessor(SparkRegistry.abi, {
      name: 'SparkRegistry',
      ...config,
    })
  }

   


  onLogAuthError(handler: (log: FuelLog<AuthErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<AuthErrorOutput>(logIdFilter ?? ["487470194140633944"], (log, ctx) => handler(log, ctx))
  }

  onLogMarketRegistryError(handler: (log: FuelLog<MarketRegistryErrorOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<MarketRegistryErrorOutput>(logIdFilter ?? ["12854673644547923665"], (log, ctx) => handler(log, ctx))
  }

  onLogMarketRegisterEvent(handler: (log: FuelLog<MarketRegisterEventOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<MarketRegisterEventOutput>(logIdFilter ?? ["16526329487357911494"], (log, ctx) => handler(log, ctx))
  }

  onLogMarketUnregisterEvent(handler: (log: FuelLog<MarketUnregisterEventOutput>, ctx: FuelContractContext<SparkRegistry>) => void | Promise<void>, logIdFilter?: string | string[]) {
    return super.onLog<MarketUnregisterEventOutput>(logIdFilter ?? ["8687802410378175690"], (log, ctx) => handler(log, ctx))
  }

}
